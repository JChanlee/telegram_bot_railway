import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class OrderForm(StatesGroup):
    choosing_delivery = State()
    full_name = State()
    phone = State()
    city = State()
    address = State()
    comment = State()

@dp.message(F.text == "/start")
async def start(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–∏–Ω–∫–∏")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üîß", reply_markup=kb)

@dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="DEWALT DCD791B", callback_data="order_DCD791B")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)

@dp.callback_query(F.data.startswith("order_"))
async def order_product(callback: CallbackQuery, state: FSMContext):
    article = callback.data.split("_")[1]
    await state.update_data(article=article)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ (–ù.–ù–æ–≤–≥–æ—Ä–æ–¥)", callback_data="pickup")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö", callback_data="cdek")]
    ])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {article}. –ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb)
    await state.set_state(OrderForm.choosing_delivery)

@dp.callback_query(F.data == "pickup")
async def pickup_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.send_message("@dewalt_nino", f"üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑\n–ê—Ä—Ç–∏–∫—É–ª: {data['article']}\nTelegram: @{callback.from_user.username}")
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!")
    await state.clear()

@dp.callback_query(F.data == "cdek")
async def cdek_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(OrderForm.full_name)

@dp.message(OrderForm.full_name)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderForm.phone)

@dp.message(OrderForm.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.city)

@dp.message(OrderForm.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö:")
    await state.set_state(OrderForm.address)

@dp.message(OrderForm.address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(OrderForm.comment)

@dp.message(OrderForm.comment)
async def complete_order(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    text = (
        f"üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –°–î–≠–ö\n"
        f"–ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–ü–í–ó: {data['address']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"Telegram: @{message.from_user.username}"
    )
    await bot.send_message("@dewalt_nino", text)
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ ‚úâÔ∏è")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())"
